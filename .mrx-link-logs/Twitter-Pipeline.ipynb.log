[2022-11-17 12:56:58] mrx-link.MRXLinkMagics.mrxlink_set_parameters() DEBUG: args: Namespace(no_reply=True, base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664585.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664585.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668664617%7C23:username-localhost-8888%7C44:YmE4NmFkNWZhODAwNDc2NDk1MjBlMGViYzkzM2JmMDA=%7C976b56ff0f61f59c195c7944b9cf621108e04af1ba9b5709e3892e487dc87e5b', cell='[]\n')
[2022-11-17 12:56:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664585.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664585.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668664618%7C23:username-localhost-8888%7C44:YWI5MGQzMTdjNmNiNDNhODhhMWU3NzgxYjYzN2VmYmY=%7Ce65614a296af0a624f45b618c3006cccd4d2d8768a8cbf5060b6d262c40444b8', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport boto3\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'*****\'\\napi_secret_key      = \'*****\'\\n\\naccess_token        = \'*****\'\\naccess_token_secret = \'*****\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'output/twitter_data_version1.csv\')\\ndfbaru.to_csv(\'output/twitter_data_version2.csv\')\\ndftiga.to_csv(\'output/twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}},{"id":"1d9887ca-6408-485e-b5e1-9f849eea852a","name":"Upload to AWS S3","code":"client = boto3.client(\'s3\',\\n                      aws_access_key_id=\'****\',\\n                      aws_secret_access_key=\'****\')\\n\\nfor file in os.listdir():\\n    if \'.csv\' in file:\\n        upload_file_bucket  = \'****\'\\n        upload_file_key     = str(file)\\n        client.upload_file(file, upload_file_bucket, upload_file_key)","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"652e2144-1685-4582-ae72-15d3eddc0f2d","child":"1d9887ca-6408-485e-b5e1-9f849eea852a"}]}\n')
[2022-11-17 12:56:58] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport boto3\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = '*****'\napi_secret_key      = '*****'\n\naccess_token        = '*****'\naccess_token_secret = '*****'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('output/twitter_data_version1.csv')\ndfbaru.to_csv('output/twitter_data_version2.csv')\ndftiga.to_csv('output/twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}, {'id': '1d9887ca-6408-485e-b5e1-9f849eea852a', 'name': 'Upload to AWS S3', 'code': "client = boto3.client('s3',\n                      aws_access_key_id='****',\n                      aws_secret_access_key='****')\n\nfor file in os.listdir():\n    if '.csv' in file:\n        upload_file_bucket  = '****'\n        upload_file_key     = str(file)\n        client.upload_file(file, upload_file_bucket, upload_file_key)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'child': '1d9887ca-6408-485e-b5e1-9f849eea852a'}]}
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:56:58] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664585.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664585.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668664618%7C23:username-localhost-8888%7C44:NGZmMTIwOWYxNWM0NDMzMTk4OWRkZGNlMDg0YzM0YTE=%7C6bbb3de792e368f8f882e9e1c52ba107aa304b0e0eaed7706a3a5c168cdbbd52', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport boto3\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'*****\'\\napi_secret_key      = \'*****\'\\n\\naccess_token        = \'*****\'\\naccess_token_secret = \'*****\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'output/twitter_data_version1.csv\')\\ndfbaru.to_csv(\'output/twitter_data_version2.csv\')\\ndftiga.to_csv(\'output/twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}},{"id":"1d9887ca-6408-485e-b5e1-9f849eea852a","name":"Upload to AWS S3","code":"client = boto3.client(\'s3\',\\n                      aws_access_key_id=\'****\',\\n                      aws_secret_access_key=\'****\')\\n\\nfor file in os.listdir():\\n    if \'.csv\' in file:\\n        upload_file_bucket  = \'****\'\\n        upload_file_key     = str(file)\\n        client.upload_file(file, upload_file_bucket, upload_file_key)","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"652e2144-1685-4582-ae72-15d3eddc0f2d","child":"1d9887ca-6408-485e-b5e1-9f849eea852a"}]}\n')
[2022-11-17 12:57:01] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport boto3\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = '*****'\napi_secret_key      = '*****'\n\naccess_token        = '*****'\naccess_token_secret = '*****'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('output/twitter_data_version1.csv')\ndfbaru.to_csv('output/twitter_data_version2.csv')\ndftiga.to_csv('output/twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}, {'id': '1d9887ca-6408-485e-b5e1-9f849eea852a', 'name': 'Upload to AWS S3', 'code': "client = boto3.client('s3',\n                      aws_access_key_id='****',\n                      aws_secret_access_key='****')\n\nfor file in os.listdir():\n    if '.csv' in file:\n        upload_file_bucket  = '****'\n        upload_file_key     = str(file)\n        client.upload_file(file, upload_file_bucket, upload_file_key)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'child': '1d9887ca-6408-485e-b5e1-9f849eea852a'}]}
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:57:01] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664671.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664671.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668664698%7C23:username-localhost-8888%7C44:MjJkZDMxZTNkZTFmNDRkNGIyZmI4NmM4Y2YzOTY5OTA=%7Cd157b843578e531f0037757228c61128806381c421dbe9bd28c80ee8a030965a', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport boto3\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'*****\'\\napi_secret_key      = \'*****\'\\n\\naccess_token        = \'*****\'\\naccess_token_secret = \'*****\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'output/twitter_data_version1.csv\')\\ndfbaru.to_csv(\'output/twitter_data_version2.csv\')\\ndftiga.to_csv(\'output/twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}},{"id":"1d9887ca-6408-485e-b5e1-9f849eea852a","name":"Upload to AWS S3","code":"client = boto3.client(\'s3\',\\n                      aws_access_key_id=\'****\',\\n                      aws_secret_access_key=\'****\')\\n\\nfor file in os.listdir():\\n    if \'.csv\' in file:\\n        upload_file_bucket  = \'****\'\\n        upload_file_key     = str(file)\\n        client.upload_file(file, upload_file_bucket, upload_file_key)","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"652e2144-1685-4582-ae72-15d3eddc0f2d","child":"1d9887ca-6408-485e-b5e1-9f849eea852a"}]}\n')
[2022-11-17 12:58:20] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport boto3\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = '*****'\napi_secret_key      = '*****'\n\naccess_token        = '*****'\naccess_token_secret = '*****'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('output/twitter_data_version1.csv')\ndfbaru.to_csv('output/twitter_data_version2.csv')\ndftiga.to_csv('output/twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}, {'id': '1d9887ca-6408-485e-b5e1-9f849eea852a', 'name': 'Upload to AWS S3', 'code': "client = boto3.client('s3',\n                      aws_access_key_id='****',\n                      aws_secret_access_key='****')\n\nfor file in os.listdir():\n    if '.csv' in file:\n        upload_file_bucket  = '****'\n        upload_file_key     = str(file)\n        client.upload_file(file, upload_file_bucket, upload_file_key)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'child': '1d9887ca-6408-485e-b5e1-9f849eea852a'}]}
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:20] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664671.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664671.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668664713%7C23:username-localhost-8888%7C44:MzYxNDJjOTgwYmRlNGRmYzhmZmQ5NjA1YTI5OTc0ZjA=%7Ce8c279fe38a99e10db897760de28a7b62fef8d1eb181c8acee673d51c66d0bee', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport boto3\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'*****\'\\napi_secret_key      = \'*****\'\\n\\naccess_token        = \'*****\'\\naccess_token_secret = \'*****\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'output/twitter_data_version1.csv\')\\ndfbaru.to_csv(\'output/twitter_data_version2.csv\')\\ndftiga.to_csv(\'output/twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}},{"id":"1d9887ca-6408-485e-b5e1-9f849eea852a","name":"Upload to AWS S3","code":"client = boto3.client(\'s3\',\\n                      aws_access_key_id=\'****\',\\n                      aws_secret_access_key=\'****\')\\n\\nfor file in os.listdir():\\n    if \'.csv\' in file:\\n        upload_file_bucket  = \'****\'\\n        upload_file_key     = str(file)\\n        client.upload_file(file, upload_file_bucket, upload_file_key)","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"652e2144-1685-4582-ae72-15d3eddc0f2d","child":"1d9887ca-6408-485e-b5e1-9f849eea852a"}]}\n')
[2022-11-17 12:58:37] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport boto3\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = '*****'\napi_secret_key      = '*****'\n\naccess_token        = '*****'\naccess_token_secret = '*****'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('output/twitter_data_version1.csv')\ndfbaru.to_csv('output/twitter_data_version2.csv')\ndftiga.to_csv('output/twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}, {'id': '1d9887ca-6408-485e-b5e1-9f849eea852a', 'name': 'Upload to AWS S3', 'code': "client = boto3.client('s3',\n                      aws_access_key_id='****',\n                      aws_secret_access_key='****')\n\nfor file in os.listdir():\n    if '.csv' in file:\n        upload_file_bucket  = '****'\n        upload_file_key     = str(file)\n        client.upload_file(file, upload_file_bucket, upload_file_key)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'child': '1d9887ca-6408-485e-b5e1-9f849eea852a'}]}
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:58:37] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664671.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664671.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668664764%7C23:username-localhost-8888%7C44:YWI4MjRiMGY3MTIxNGM1ZmE3Mjg2ZGJkZDdjODBkZjA=%7Cf1dc87f676a922ccc0643f58be6671d021c18e455e394793f274f4c115b41adb', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport boto3\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'*****\'\\napi_secret_key      = \'*****\'\\n\\naccess_token        = \'*****\'\\naccess_token_secret = \'*****\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'output/twitter_data_version1.csv\')\\ndfbaru.to_csv(\'output/twitter_data_version2.csv\')\\ndftiga.to_csv(\'output/twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}},{"id":"1d9887ca-6408-485e-b5e1-9f849eea852a","name":"Upload to AWS S3","code":"client = boto3.client(\'s3\',\\n                      aws_access_key_id=\'****\',\\n                      aws_secret_access_key=\'****\')\\n\\nfor file in os.listdir():\\n    if \'.csv\' in file:\\n        upload_file_bucket  = \'****\'\\n        upload_file_key     = str(file)\\n        client.upload_file(file, upload_file_bucket, upload_file_key)","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"652e2144-1685-4582-ae72-15d3eddc0f2d","child":"1d9887ca-6408-485e-b5e1-9f849eea852a"}]}\n')
[2022-11-17 12:59:27] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport boto3\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = '*****'\napi_secret_key      = '*****'\n\naccess_token        = '*****'\naccess_token_secret = '*****'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('output/twitter_data_version1.csv')\ndfbaru.to_csv('output/twitter_data_version2.csv')\ndftiga.to_csv('output/twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}, {'id': '1d9887ca-6408-485e-b5e1-9f849eea852a', 'name': 'Upload to AWS S3', 'code': "client = boto3.client('s3',\n                      aws_access_key_id='****',\n                      aws_secret_access_key='****')\n\nfor file in os.listdir():\n    if '.csv' in file:\n        upload_file_bucket  = '****'\n        upload_file_key     = str(file)\n        client.upload_file(file, upload_file_bucket, upload_file_key)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'child': '1d9887ca-6408-485e-b5e1-9f849eea852a'}]}
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 12:59:27] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664671.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664671.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668664822%7C23:username-localhost-8888%7C44:MDQ3MzUxMzU5MDYzNGIxMmEwNjM0ZGM2MDIwYmFlY2Q=%7C1512f0ed5afc2d2cf745588cb27ba55f4303f21576827f7f9d70f76c302919d7', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport boto3\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'*****\'\\napi_secret_key      = \'*****\'\\n\\naccess_token        = \'*****\'\\naccess_token_secret = \'*****\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'output/twitter_data_version1.csv\')\\ndfbaru.to_csv(\'output/twitter_data_version2.csv\')\\ndftiga.to_csv(\'output/twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}},{"id":"1d9887ca-6408-485e-b5e1-9f849eea852a","name":"Upload to AWS S3","code":"client = boto3.client(\'s3\',\\n                      aws_access_key_id=\'****\',\\n                      aws_secret_access_key=\'****\')\\n\\nfor file in os.listdir():\\n    if \'.csv\' in file:\\n        upload_file_bucket  = \'****\'\\n        upload_file_key     = str(file)\\n        client.upload_file(file, upload_file_bucket, upload_file_key)","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"652e2144-1685-4582-ae72-15d3eddc0f2d","child":"1d9887ca-6408-485e-b5e1-9f849eea852a"}]}\n')
[2022-11-17 13:00:24] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport boto3\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = '*****'\napi_secret_key      = '*****'\n\naccess_token        = '*****'\naccess_token_secret = '*****'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('output/twitter_data_version1.csv')\ndfbaru.to_csv('output/twitter_data_version2.csv')\ndftiga.to_csv('output/twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}, {'id': '1d9887ca-6408-485e-b5e1-9f849eea852a', 'name': 'Upload to AWS S3', 'code': "client = boto3.client('s3',\n                      aws_access_key_id='****',\n                      aws_secret_access_key='****')\n\nfor file in os.listdir():\n    if '.csv' in file:\n        upload_file_bucket  = '****'\n        upload_file_key     = str(file)\n        client.upload_file(file, upload_file_bucket, upload_file_key)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'child': '1d9887ca-6408-485e-b5e1-9f849eea852a'}]}
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:00:24] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:05] mrx-link.MRXLinkMagics.mrxlink_set_parameters() DEBUG: args: Namespace(no_reply=True, base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664914.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664914.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668664924%7C23:username-localhost-8888%7C44:ODZiMDliYjY5Y2IxNGRhMzgwNTBmMGI0OGEwNWM0MTY=%7Cc8a18a71a45419d2f043fca6f6fd7e5229266d7e9cc008c23d1b432547a3f0ff', cell='[]\n')
[2022-11-17 13:02:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664914.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664914.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668664925%7C23:username-localhost-8888%7C44:MjNhZjAwYmI5MGI1NDI0ZWFmMzI3YmQ3ZTVmNDEzYmE=%7C73a4ef9a68aec36955ce063a414acf0dde16b63c4aff4db8b9c754ce018e1ec5', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport boto3\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'**\'\\napi_secret_key      = \'**\'\\n\\naccess_token        = \'**\'\\naccess_token_secret = \'**\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}},{"id":"1d9887ca-6408-485e-b5e1-9f849eea852a","name":"Upload to AWS S3","code":"client = boto3.client(\'s3\',\\n                      aws_access_key_id=\'**\',\\n                      aws_secret_access_key=\'**\')\\n\\nfor file in os.listdir():\\n    if \'.csv\' in file:\\n        upload_file_bucket  = \'athoillah-twitter-etl\'\\n        upload_file_key     = str(file)\\n        client.upload_file(file, upload_file_bucket, upload_file_key)","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"652e2144-1685-4582-ae72-15d3eddc0f2d","child":"1d9887ca-6408-485e-b5e1-9f849eea852a"}]}\n')
[2022-11-17 13:02:05] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport boto3\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = '**'\napi_secret_key      = '**'\n\naccess_token        = '**'\naccess_token_secret = '**'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}, {'id': '1d9887ca-6408-485e-b5e1-9f849eea852a', 'name': 'Upload to AWS S3', 'code': "client = boto3.client('s3',\n                      aws_access_key_id='**',\n                      aws_secret_access_key='**')\n\nfor file in os.listdir():\n    if '.csv' in file:\n        upload_file_bucket  = 'athoillah-twitter-etl'\n        upload_file_key     = str(file)\n        client.upload_file(file, upload_file_bucket, upload_file_key)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'child': '1d9887ca-6408-485e-b5e1-9f849eea852a'}]}
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664914.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664914.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668664948%7C23:username-localhost-8888%7C44:Y2QwYzc4YWIxMjg2NDlmMDk1ODMwZTcyMjM4MjIxZWE=%7C564ecae14aaec602774a987e18b859861fef3c2b819c3750b8fd04554cec2e64', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport boto3\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'**\'\\napi_secret_key      = \'**\'\\n\\naccess_token        = \'**\'\\naccess_token_secret = \'**\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}},{"id":"1d9887ca-6408-485e-b5e1-9f849eea852a","name":"Upload to AWS S3","code":"client = boto3.client(\'s3\',\\n                      aws_access_key_id=\'**\',\\n                      aws_secret_access_key=\'**\')\\n\\nfor file in os.listdir():\\n    if \'.csv\' in file:\\n        upload_file_bucket  = \'athoillah-twitter-etl\'\\n        upload_file_key     = str(file)\\n        client.upload_file(file, upload_file_bucket, upload_file_key)","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"652e2144-1685-4582-ae72-15d3eddc0f2d","child":"1d9887ca-6408-485e-b5e1-9f849eea852a"}]}\n')
[2022-11-17 13:02:32] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport boto3\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = '**'\napi_secret_key      = '**'\n\naccess_token        = '**'\naccess_token_secret = '**'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}, {'id': '1d9887ca-6408-485e-b5e1-9f849eea852a', 'name': 'Upload to AWS S3', 'code': "client = boto3.client('s3',\n                      aws_access_key_id='**',\n                      aws_secret_access_key='**')\n\nfor file in os.listdir():\n    if '.csv' in file:\n        upload_file_bucket  = 'athoillah-twitter-etl'\n        upload_file_key     = str(file)\n        client.upload_file(file, upload_file_bucket, upload_file_key)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'child': '1d9887ca-6408-485e-b5e1-9f849eea852a'}]}
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:32] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664914.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664914.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668664956%7C23:username-localhost-8888%7C44:ZDI5MGJiZDc2ZDRmNDA0YTlkZDA1ZGY2ZTI5Y2QxMWI=%7Ca4e9f5444a5a32a91c33fb20e3c7938d02d4145744928ee89638891ff21643b7', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport boto3\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'**\'\\napi_secret_key      = \'**\'\\n\\naccess_token        = \'**\'\\naccess_token_secret = \'**\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}},{"id":"1d9887ca-6408-485e-b5e1-9f849eea852a","name":"Upload to AWS S3","code":"client = boto3.client(\'s3\',\\n                      aws_access_key_id=\'**\',\\n                      aws_secret_access_key=\'**\')\\n\\nfor file in os.listdir():\\n    if \'.csv\' in file:\\n        upload_file_bucket  = \'athoillah-twitter-etl\'\\n        upload_file_key     = str(file)\\n        client.upload_file(file, upload_file_bucket, upload_file_key)","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"652e2144-1685-4582-ae72-15d3eddc0f2d","child":"1d9887ca-6408-485e-b5e1-9f849eea852a"}]}\n')
[2022-11-17 13:02:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport boto3\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = '**'\napi_secret_key      = '**'\n\naccess_token        = '**'\naccess_token_secret = '**'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}, {'id': '1d9887ca-6408-485e-b5e1-9f849eea852a', 'name': 'Upload to AWS S3', 'code': "client = boto3.client('s3',\n                      aws_access_key_id='**',\n                      aws_secret_access_key='**')\n\nfor file in os.listdir():\n    if '.csv' in file:\n        upload_file_bucket  = 'athoillah-twitter-etl'\n        upload_file_key     = str(file)\n        client.upload_file(file, upload_file_bucket, upload_file_key)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'child': '1d9887ca-6408-485e-b5e1-9f849eea852a'}]}
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:02:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664963.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664963.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668664978%7C23:username-localhost-8888%7C44:ZmVlMmQyMjQ2MDNjNDIwZTgxY2UwNjAyZDBlM2Y4M2Q=%7Cf0e14a560cc1dfa327f5b584c401e45fd1e2bed6504e6c36aabdf3c84200c966', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport boto3\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'**\'\\napi_secret_key      = \'**\'\\n\\naccess_token        = \'**\'\\naccess_token_secret = \'**\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}},{"id":"1d9887ca-6408-485e-b5e1-9f849eea852a","name":"Upload to AWS S3","code":"client = boto3.client(\'s3\',\\n                      aws_access_key_id=\'**\',\\n                      aws_secret_access_key=\'**\')\\n\\nfor file in os.listdir():\\n    if \'.csv\' in file:\\n        upload_file_bucket  = \'athoillah-twitter-etl\'\\n        upload_file_key     = str(file)\\n        client.upload_file(file, upload_file_bucket, upload_file_key)","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"652e2144-1685-4582-ae72-15d3eddc0f2d","child":"1d9887ca-6408-485e-b5e1-9f849eea852a"}]}\n')
[2022-11-17 13:03:03] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport boto3\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = '**'\napi_secret_key      = '**'\n\naccess_token        = '**'\naccess_token_secret = '**'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}, {'id': '1d9887ca-6408-485e-b5e1-9f849eea852a', 'name': 'Upload to AWS S3', 'code': "client = boto3.client('s3',\n                      aws_access_key_id='**',\n                      aws_secret_access_key='**')\n\nfor file in os.listdir():\n    if '.csv' in file:\n        upload_file_bucket  = 'athoillah-twitter-etl'\n        upload_file_key     = str(file)\n        client.upload_file(file, upload_file_bucket, upload_file_key)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'child': '1d9887ca-6408-485e-b5e1-9f849eea852a'}]}
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:03] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664963.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664963.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668664983%7C23:username-localhost-8888%7C44:YWUxNjRiODcyMmUwNDIyM2I0ZDMwNDU2Njg2MWQyOTI=%7Cf8ac88bc4cf29506c432db7ecac930131bf5468299450c6e0be448ab83841c93', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport boto3\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"\\n","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}},{"id":"1d9887ca-6408-485e-b5e1-9f849eea852a","name":"Upload to AWS S3","code":"client = boto3.client(\'s3\',\\n                      aws_access_key_id=\'**\',\\n                      aws_secret_access_key=\'**\')\\n\\nfor file in os.listdir():\\n    if \'.csv\' in file:\\n        upload_file_bucket  = \'athoillah-twitter-etl\'\\n        upload_file_key     = str(file)\\n        client.upload_file(file, upload_file_bucket, upload_file_key)","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"652e2144-1685-4582-ae72-15d3eddc0f2d","child":"1d9887ca-6408-485e-b5e1-9f849eea852a"}]}\n')
[2022-11-17 13:03:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport boto3\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': '\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}, {'id': '1d9887ca-6408-485e-b5e1-9f849eea852a', 'name': 'Upload to AWS S3', 'code': "client = boto3.client('s3',\n                      aws_access_key_id='**',\n                      aws_secret_access_key='**')\n\nfor file in os.listdir():\n    if '.csv' in file:\n        upload_file_bucket  = 'athoillah-twitter-etl'\n        upload_file_key     = str(file)\n        client.upload_file(file, upload_file_bucket, upload_file_key)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'child': '1d9887ca-6408-485e-b5e1-9f849eea852a'}]}
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:06] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664963.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664963.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668664988%7C23:username-localhost-8888%7C44:ODE5NzM0NWY0ZDBhNDBhMzk1MjI5NGEzMTUzYTQzNTg=%7C557962249a72de63d8b26867ca8c9d28009b3b26d20e4db308e9dca2d0bd6e74', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport boto3\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}},{"id":"1d9887ca-6408-485e-b5e1-9f849eea852a","name":"Upload to AWS S3","code":"client = boto3.client(\'s3\',\\n                      aws_access_key_id=\'**\',\\n                      aws_secret_access_key=\'**\')\\n\\nfor file in os.listdir():\\n    if \'.csv\' in file:\\n        upload_file_bucket  = \'athoillah-twitter-etl\'\\n        upload_file_key     = str(file)\\n        client.upload_file(file, upload_file_bucket, upload_file_key)","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"652e2144-1685-4582-ae72-15d3eddc0f2d","child":"1d9887ca-6408-485e-b5e1-9f849eea852a"}]}\n')
[2022-11-17 13:03:09] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport boto3\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}, {'id': '1d9887ca-6408-485e-b5e1-9f849eea852a', 'name': 'Upload to AWS S3', 'code': "client = boto3.client('s3',\n                      aws_access_key_id='**',\n                      aws_secret_access_key='**')\n\nfor file in os.listdir():\n    if '.csv' in file:\n        upload_file_bucket  = 'athoillah-twitter-etl'\n        upload_file_key     = str(file)\n        client.upload_file(file, upload_file_bucket, upload_file_key)", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'child': '1d9887ca-6408-485e-b5e1-9f849eea852a'}]}
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:09] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664963.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668664963.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668664999%7C23:username-localhost-8888%7C44:YWFhMDQ0MTZhMGFmNDJmYTlhMzdjZWIxMTY3NmEzYTY=%7Cc82a40bed642cf96341577b664a8dcd2288f9b5df609601db55bbc32a47779ba', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport boto3\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}},{"id":"1d9887ca-6408-485e-b5e1-9f849eea852a","name":"Upload to AWS S3","code":"\\n","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"652e2144-1685-4582-ae72-15d3eddc0f2d","child":"1d9887ca-6408-485e-b5e1-9f849eea852a"}]}\n')
[2022-11-17 13:03:23] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport boto3\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}, {'id': '1d9887ca-6408-485e-b5e1-9f849eea852a', 'name': 'Upload to AWS S3', 'code': '\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'child': '1d9887ca-6408-485e-b5e1-9f849eea852a'}]}
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:23] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665005.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20username-localhost-8888=2%7C1:0%7C10:1668665003%7C23:username-localhost-8888%7C44:ZmU4NjRmMTFhY2U3NDA0YzhkYWMwNzBjNmIzZDZhOTE=%7C3dcb56027d962454f18d5cdfc04d18930baff0de16f56309e83dc8deaeb074fa;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665005.0.0.0', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport boto3\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:03:26] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport boto3\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Upload to AWS S3 (1d9887ca-6408-485e-b5e1-9f849eea852a), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:03:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665064.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665064.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665220%7C23:username-localhost-8888%7C44:YWMyNzU2MGFhYjEzNGFkNGFkZWZiNTdiNzI4ZTIyNmI=%7C8f67eae0f4d61d51c975ce4e29e2b16907c5f4f5b7aaf0ba22b8ec1dce25ca6e', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\n\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:07:04] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\n\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:04] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665064.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665064.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665226%7C23:username-localhost-8888%7C44:NmI4ZmJhM2IxM2YyNDU2MmE2MTBlMWIwOWMyNjViYjY=%7Cb1b15325d65fa7c6c1e675c445460bde10414ed3993bebc67bf5925515a5e937', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","name":"Define Parameter","code":"tweet_list      = []\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    refined_tweet = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date())}\\n    \\n    tweet_list.append(refined_tweet)\\n\\n\\ndf = pd.DataFrame(tweet_list)","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27"},{"parent":"ddc6abfe-89a0-42d3-9e9f-4ceb45895c27","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:07:08] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'name': 'Define Parameter', 'code': 'tweet_list      = []\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    refined_tweet = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date())}\n    \n    tweet_list.append(refined_tweet)\n\n\ndf = pd.DataFrame(tweet_list)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27'}, {'parent': 'ddc6abfe-89a0-42d3-9e9f-4ceb45895c27', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:07:08] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665322.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20username-localhost-8888=2%7C1:0%7C10:1668665319%7C23:username-localhost-8888%7C44:ODhjMzNlOTQ2YzU1NGFiOTljYTRmZmUyZWU0ZWZjYzY=%7C2ed222f364d6c026d6ee910770eaab72eea60a28477337af99b5f41fdfcaaa9a;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665322.0.0.0', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:08:44] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:08:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Parameter (ddc6abfe-89a0-42d3-9e9f-4ceb45895c27), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:44] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:45] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665322.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665322.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665326%7C23:username-localhost-8888%7C44:ZWM4NTZhNTI5MWViNDM3MGI1NzI2NTFiMGIxN2NkZDk=%7C4ffa196195ba0d8d880c9f2efe51759f644e500ce9351b2027b5874755e5a346', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"tweet_list_2      = []\\nall_polarity    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity += an.polarity\\n\\n    refined_tweet_2 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_2.append(refined_tweet_2)\\n\\n\\ndfbaru = pd.DataFrame(tweet_list_2)","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:08:48] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': 'tweet_list_2      = []\nall_polarity    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity += an.polarity\n\n    refined_tweet_2 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_2.append(refined_tweet_2)\n\n\ndfbaru = pd.DataFrame(tweet_list_2)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:08:48] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665322.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665322.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665369%7C23:username-localhost-8888%7C44:N2U4ZjExMThiMmRiNDBlNTkzZDNiNjkzY2EwYjEyMDk=%7C10cf537e9c61a8a08d32232159b07b2448780bf25734a282288a922cddfedd43', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"\\n","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:09:31] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': '\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665322.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665322.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665371%7C23:username-localhost-8888%7C44:ZDkzYWVkODMyNjE5NGJiYjhhY2E0OWE3NDM4ZTgzZjc=%7C78fcf74833d6409992a041b5281cb4a605a1100e2b9d1a01d4ef2715d0309ba7', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","name":"Param and Sentiment Analysis","code":"\\n","metadata":{"componentType":"CodeCell","headerColor":"#0093FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"ef0dc6fa-3d3b-4624-b064-ee44a0325734","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"ef0dc6fa-3d3b-4624-b064-ee44a0325734"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:09:34] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'name': 'Param and Sentiment Analysis', 'code': '\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#0093FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': 'ef0dc6fa-3d3b-4624-b064-ee44a0325734'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665386.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665386.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665387%7C23:username-localhost-8888%7C44:NGMxZTg2ZDRlNWUyNDhmNWI3OGQwOWI5YzkxYmZkMTI=%7Cec23891aa3e5a538217973782ed8ff9d7009ba9a4f249618587fe170aa04f1d4', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:09:47] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Param and Sentiment Analysis (ef0dc6fa-3d3b-4624-b064-ee44a0325734), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:09:47] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665402.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665402.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665411%7C23:username-localhost-8888%7C44:ZWM2MTE5MzI5YWIwNDU1NThjYWZmNDU3YzNjYzk1ZDA=%7C43a6f15a4b28274dbc3245eb41e94e6ae1ed345a9b1ae9da089acb705962c0dd', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\\n\\ndf3 = pd.DataFrame(sentiment_values)\\ndf3.columns = [\'polarity\']\\ndf[\'polarity\']=df3\\n\\ndf4 = pd.DataFrame(subjectivity_values)\\ndf4.columns = [\'subjectivity\']\\ndf[\'subjectivity\']=df4","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:10:12] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': "sentiment_objects = [TextBlob(tweet) for tweet in cleaned]\nsentiment_values = [tweet.sentiment.polarity for tweet in sentiment_objects]\nsubjectivity_values = [tweet.sentiment.subjectivity for tweet in sentiment_objects]\n\ndf3 = pd.DataFrame(sentiment_values)\ndf3.columns = ['polarity']\ndf['polarity']=df3\n\ndf4 = pd.DataFrame(subjectivity_values)\ndf4.columns = ['subjectivity']\ndf['subjectivity']=df4", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:12] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665402.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665402.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665427%7C23:username-localhost-8888%7C44:MWJjMjJiZjgzNmNkNDAzNTljZDU0ZWQyMzY4ZGVmNjI=%7C79b47e5478424b3367506e8d2dce4cd0a132e02237283b838c3939f44d234d50', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:10:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': '\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:31] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:33] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665432.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20username-localhost-8888=2%7C1:0%7C10:1668665431%7C23:username-localhost-8888%7C44:ZDg5NWUxNTE4NGUwNDM3ZDhhODM4OTlkMTdhMzM3YzA=%7Cab8c166f8144802d5736b6aeb334e48832409bc223266e3054124494b2ac4d52;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665432.0.0.0', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"c6755140-d0b5-4dd5-9158-590c7d389cd6","name":"Sentiment Analysis","code":"\\n","metadata":{"componentType":"CodeCell","headerColor":"#FF004F","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"c6755140-d0b5-4dd5-9158-590c7d389cd6"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"c6755140-d0b5-4dd5-9158-590c7d389cd6","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:10:33] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'name': 'Sentiment Analysis', 'code': '\n', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF004F', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': 'c6755140-d0b5-4dd5-9158-590c7d389cd6'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': 'c6755140-d0b5-4dd5-9158-590c7d389cd6', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665432.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665432.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665433%7C23:username-localhost-8888%7C44:MGViNDk1NWQzZDQ2NGQ3MmJjYjA1YmMxMWQ5Y2U4ZmU=%7Ca9d6bd6a856ebe4cbf9fa0be5e02803cd85271b506ce7577056dc855f58de00d', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:10:34] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Sentiment Analysis (c6755140-d0b5-4dd5-9158-590c7d389cd6), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:10:34] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665467.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665467.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665481%7C23:username-localhost-8888%7C44:YTgxNWVjNDY0M2U4NDVhYWE5Mjc1ZTQ1YjA4NzFhMjI=%7C88b094ccb2bfd67e53f002189dde16a840661598dfbbdcce783270d7b008d57c', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:11:25] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:11:25] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:26] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665467.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665467.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665486%7C23:username-localhost-8888%7C44:NDAwZWZmMTY3NWMzNGIxNDkxOGE4OGFlZmY5MTM3MDc=%7Cafeb92f2d450070f891e5642146db108252ab5b925bbe69e51de37e47b2e8277', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:11:30] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:11:30] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665467.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665467.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665542%7C23:username-localhost-8888%7C44:NDdmNjhiOWJmYjgyNDkzMmIyZGFjMDU4YWE3MmIxMmQ=%7C5aca2a4ed8b16ae6aa9c6bfed82e8a4b15b4860a08f684432e67a240697ca2ea', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:12:22] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:22] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665549.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665549.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665554%7C23:username-localhost-8888%7C44:MDQ1ZmNhZDRiNTg5NDAyYmIyMDRkMDgwZTQxNWU4ODc=%7Cf18eb78ddeceaf83ac723b70e7b7271fed7f2f1ee2c612a3844e1fe3cf9278b2', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:12:36] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:36] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665549.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665549.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665562%7C23:username-localhost-8888%7C44:YzJiOWQ5NGZhNDc3NGE0MzlhNDM5NWJiM2M0ODgwMjg=%7C3b300f7633a5251991693c01e4500985af3fac587c8cb3fb2aa4a640a453bb44', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:12:43] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:43] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665549.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665549.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665573%7C23:username-localhost-8888%7C44:YmRmNGM5NDVmYzAxNDIxZWI0Zjk2YzM0MzYzNmViYmQ=%7C8735778ffac2b5a8c8378cfb1f4acdb5d22b1b065df84a3c0e572456e8ceaf2e', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:12:55] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:12:55] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:06] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665549.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665549.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665585%7C23:username-localhost-8888%7C44:NTVmZmNlOTMyMzM0NGYwMWIyYzU5NjEwNGMyZTFlMjQ=%7C0d72db14c75d5399f472333089b08b6c77f3382e8e2e45c0387ec96329aa215e', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:13:07] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:07] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: args: Namespace(base_url='http://localhost:8888/', header='Accept-Encoding=gzip,%20deflate,%20br;Host=localhost:8888;%20Authorization=token%204a3aa2774991605f43b1cdc5f2fcea769063911f35b1da47', cookie='_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665549.0.0.0;%20_xsrf=2%7Cf6affaa7%7C96afe98e08e72b370da5c347299f1a73%7C1666085019;%20_ga=GA1.1.411641711.1666085302;%20__utma=111872281.411641711.1666085302.1666707310.1666707310.1;%20__utmz=111872281.1666707310.1.1.utmcsr=(direct)%7Cutmccn=(direct)%7Cutmcmd=(none);%20csrftoken=svoAVz1u5buLEbkccNQfZnPGciaElXia;%20session=26358e45-2ba0-46fe-a75a-0ef6a81174c7.LiMHwTS3sS1wxK2ZZjU2T8HQHmg;%20username-localhost-8889=2%7C1:0%7C10:1668664479%7C23:username-localhost-8889%7C44:MWM5NDNkZWYwY2Y4NDY2ZGEyZDE1OWMyZDFkNTQ3YzQ=%7C987085effdf47e860d1d0334c625cfa22a8ba176bfa964770d43c75f323a812c;%20_ga_R3VN4GNEX2=GS1.1.1668664451.4.1.1668665549.0.0.0;%20username-localhost-8888=2%7C1:0%7C10:1668665595%7C23:username-localhost-8888%7C44:OTFmODVjNGM3ZDlmNGMzOTk0NDJhM2IzMDQzNWE3NmQ=%7C11abedf8b2b4d5ea4eaa1ae9185f1876e4ea197d0f8a0ce1f164cb3745a51405', cell='{"nodes":[{"id":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","name":"Import Module","code":"import tweepy\\nimport re\\nimport numpy as np\\nimport pandas as pd\\nfrom datetime import datetime\\nfrom textblob import TextBlob\\nimport os\\nfrom better_profanity import profanity","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","name":"Define Twitter API","code":"api_key             = \'J7dKwJ6tNZQGFvcBqDbL2kBjA\'\\napi_secret_key      = \'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP\'\\n\\naccess_token        = \'1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7\'\\naccess_token_secret = \'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5\'","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","name":"Authentication and Get Tweet","code":"auth = tweepy.OAuthHandler(api_key, api_secret_key)\\nauth.set_access_token(access_token, access_token_secret)\\n\\napi = tweepy.API(auth)\\n\\ntweets = api.user_timeline(screen_name=\'@elonmusk\',\\n                            count=1000,\\n                            include_rts = False,\\n                            tweet_mode = \'extended\')","metadata":{"componentType":"CodeCell","headerColor":"inherit","comments":[],"diskcache":true}},{"id":"1a8d2d40-7b09-41b1-9959-f102dea7c898","name":"Cleansing Tweet","code":"cl = []\\ncl2 = []\\n\\ndef clean_tweet(tweet):\\n    if type(tweet) == np.float:\\n        return \\"\\"\\n    r = tweet.lower()\\n    r = profanity.censor(r)\\n    r = re.sub(\\"\'\\", \\"\\", r) # This is to avoid removing contractions in english\\n    r = re.sub(\\"@[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(\\"#[A-Za-z0-9_]+\\",\\"\\", r)\\n    r = re.sub(r\'http\\\\S+\', \'\', r)\\n    r = re.sub(\'[()!?]\', \' \', r)\\n    r = re.sub(\'\\\\[.*?\\\\]\',\' \', r)\\n    r = re.sub(\\"[^a-z0-9]\\",\\" \\", r)\\n    r = r.split()\\n    stopwords = [\\"for\\", \\"on\\", \\"an\\", \\"a\\", \\"of\\", \\"and\\", \\"in\\", \\"the\\", \\"to\\", \\"from\\"]\\n    r = [w for w in r if not w in stopwords]\\n    r = \\" \\".join(word for word in r)\\n    return r\\n\\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\\n\\ndf2 = pd.DataFrame(cleaned)\\ndf2.columns = [\'cleaned_tweet\']\\ndf[\'cleaned_tweet\']=df2\\n\\ndfbaru2 = pd.DataFrame(cleaned)\\ndfbaru2.columns = [\'cleaned_tweet\']\\ndfbaru[\'cleaned_tweet\']=dfbaru2","metadata":{"componentType":"CodeCell","headerColor":"#6C00FF","comments":[],"diskcache":false}},{"id":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","name":"Define All Parameter","code":"tweet_list_3      = []\\nall_polarity_3    = 0\\nfor tweet in tweets:\\n\\n    if \'retweeted_status\' in tweet._json:\\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\\n    else:\\n                    full_text = tweet.full_text\\n\\n    an = TextBlob(full_text)\\n    all_polarity_3 += an.polarity\\n\\n    refined_tweet_3 = {\\"user\\" : tweet.user.screen_name,\\n                    \'text\' : full_text,\\n                    \'id\' : tweet.id_str,\\n                    \'entities\' : tweet.entities,\\n                    \'favorite_count\' : tweet.favorite_count,\\n                    \'retweet_count\' : tweet.retweet_count,\\n                    \'created_at\' : str(tweet.created_at.date()),\\n                    \'coordinates\' : tweet.coordinates,\\n                    \'place\' : tweet.place,\\n                    \'Polarity\': an.polarity,\\n                    \'Subjectivity\': an.subjectivity}\\n    \\n    tweet_list_3.append(refined_tweet_3)\\n\\n\\ndftiga = pd.DataFrame(tweet_list_3)","metadata":{"componentType":"CodeCell","headerColor":"#FF8200","comments":[],"diskcache":true}},{"id":"652e2144-1685-4582-ae72-15d3eddc0f2d","name":"Save csv Locally","code":"df.to_csv(\'twitter_data_version1.csv\')\\ndfbaru.to_csv(\'twitter_data_version2.csv\')\\ndftiga.to_csv(\'twitter_data_version3.csv\')","metadata":{"componentType":"CodeCell","headerColor":"#2b1748","comments":[],"diskcache":false}}],"edges":[{"parent":"27f5cdd6-1d37-4e4b-871c-5e1caacba0f7","child":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8"},{"parent":"9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8","child":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2"},{"parent":"0dae3910-4311-4a2f-bd03-afbad3c49a2d","child":"1a8d2d40-7b09-41b1-9959-f102dea7c898"},{"parent":"3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2","child":"0dae3910-4311-4a2f-bd03-afbad3c49a2d"},{"parent":"1a8d2d40-7b09-41b1-9959-f102dea7c898","child":"652e2144-1685-4582-ae72-15d3eddc0f2d"}]}\n')
[2022-11-17 13:13:17] mrx-link.MRXLinkMagics.mrxlink_update_dag() DEBUG: graph: {'nodes': [{'id': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'name': 'Import Module', 'code': 'import tweepy\nimport re\nimport numpy as np\nimport pandas as pd\nfrom datetime import datetime\nfrom textblob import TextBlob\nimport os\nfrom better_profanity import profanity', 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'name': 'Define Twitter API', 'code': "api_key             = 'J7dKwJ6tNZQGFvcBqDbL2kBjA'\napi_secret_key      = 'Sq09CRB0dEhQltAuiW0uquZgf11axzJIvLH58OzgG3IMDp4bfP'\n\naccess_token        = '1351578684285587457-fvnftTGTj6SrCgmrV88FiaTkKvepg7'\naccess_token_secret = 'XR7fKqZMbfqImlEAwtIP9VjlPOcgUDRzHIzmDqBiqetx5'", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'name': 'Authentication and Get Tweet', 'code': "auth = tweepy.OAuthHandler(api_key, api_secret_key)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n\ntweets = api.user_timeline(screen_name='@elonmusk',\n                            count=1000,\n                            include_rts = False,\n                            tweet_mode = 'extended')", 'metadata': {'componentType': 'CodeCell', 'headerColor': 'inherit', 'comments': [], 'diskcache': True}}, {'id': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'name': 'Cleansing Tweet', 'code': 'cl = []\ncl2 = []\n\ndef clean_tweet(tweet):\n    if type(tweet) == np.float:\n        return ""\n    r = tweet.lower()\n    r = profanity.censor(r)\n    r = re.sub("\'", "", r) # This is to avoid removing contractions in english\n    r = re.sub("@[A-Za-z0-9_]+","", r)\n    r = re.sub("#[A-Za-z0-9_]+","", r)\n    r = re.sub(r\'http\\S+\', \'\', r)\n    r = re.sub(\'[()!?]\', \' \', r)\n    r = re.sub(\'\\[.*?\\]\',\' \', r)\n    r = re.sub("[^a-z0-9]"," ", r)\n    r = r.split()\n    stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]\n    r = [w for w in r if not w in stopwords]\n    r = " ".join(word for word in r)\n    return r\n\ncleaned = [clean_tweet(tw) for tw in df[\'text\']]\ncleaned2 = [clean_tweet(tw) for tw in dfbaru[\'text\']]\n\ndf2 = pd.DataFrame(cleaned)\ndf2.columns = [\'cleaned_tweet\']\ndf[\'cleaned_tweet\']=df2\n\ndfbaru2 = pd.DataFrame(cleaned)\ndfbaru2.columns = [\'cleaned_tweet\']\ndfbaru[\'cleaned_tweet\']=dfbaru2', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#6C00FF', 'comments': [], 'diskcache': False}}, {'id': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'name': 'Define All Parameter', 'code': 'tweet_list_3      = []\nall_polarity_3    = 0\nfor tweet in tweets:\n\n    if \'retweeted_status\' in tweet._json:\n                    full_text = tweet._json[\'retweeted_status\'][\'full_text\']\n    else:\n                    full_text = tweet.full_text\n\n    an = TextBlob(full_text)\n    all_polarity_3 += an.polarity\n\n    refined_tweet_3 = {"user" : tweet.user.screen_name,\n                    \'text\' : full_text,\n                    \'id\' : tweet.id_str,\n                    \'entities\' : tweet.entities,\n                    \'favorite_count\' : tweet.favorite_count,\n                    \'retweet_count\' : tweet.retweet_count,\n                    \'created_at\' : str(tweet.created_at.date()),\n                    \'coordinates\' : tweet.coordinates,\n                    \'place\' : tweet.place,\n                    \'Polarity\': an.polarity,\n                    \'Subjectivity\': an.subjectivity}\n    \n    tweet_list_3.append(refined_tweet_3)\n\n\ndftiga = pd.DataFrame(tweet_list_3)', 'metadata': {'componentType': 'CodeCell', 'headerColor': '#FF8200', 'comments': [], 'diskcache': True}}, {'id': '652e2144-1685-4582-ae72-15d3eddc0f2d', 'name': 'Save csv Locally', 'code': "df.to_csv('twitter_data_version1.csv')\ndfbaru.to_csv('twitter_data_version2.csv')\ndftiga.to_csv('twitter_data_version3.csv')", 'metadata': {'componentType': 'CodeCell', 'headerColor': '#2b1748', 'comments': [], 'diskcache': False}}], 'edges': [{'parent': '27f5cdd6-1d37-4e4b-871c-5e1caacba0f7', 'child': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8'}, {'parent': '9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8', 'child': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2'}, {'parent': '0dae3910-4311-4a2f-bd03-afbad3c49a2d', 'child': '1a8d2d40-7b09-41b1-9959-f102dea7c898'}, {'parent': '3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2', 'child': '0dae3910-4311-4a2f-bd03-afbad3c49a2d'}, {'parent': '1a8d2d40-7b09-41b1-9959-f102dea7c898', 'child': '652e2144-1685-4582-ae72-15d3eddc0f2d'}]}
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Cleansing Tweet (1a8d2d40-7b09-41b1-9959-f102dea7c898), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define All Parameter (0dae3910-4311-4a2f-bd03-afbad3c49a2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Authentication and Get Tweet (3edc7cd1-d5d3-4822-8061-8d4b8e8aceb2), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Define Twitter API (9c5a5241-32f8-41a9-b22a-6d9ecaa2c0c8), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Import Module (27f5cdd6-1d37-4e4b-871c-5e1caacba0f7), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
[2022-11-17 13:13:17] mrx-link.MRXLinkDag.mrxlink_update_dag() DEBUG: Clear Save csv Locally (652e2144-1685-4582-ae72-15d3eddc0f2d), status MRXLinkComponentStatus.INVALID
